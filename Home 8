########
# Shiny app to create a dynamically-filterable visualization of the diamonds app
########

library(shiny)
library(tidyverse)


# We'll limit the range of selectable carats to teh actual range of carats
min.carat <- min(diamonds$carat)
max.carat <- max(diamonds$carat)

# Need a vector of axis variables as characters
axis_vars <- names(diamonds)

# Create a character vector of those columns of diamonds that are 
factor.indices <- vapply(diamonds, is.factor, TRUE)
factor.columns <- axis_vars[factor.indices]


# Define UI for application that draws a histogram
ui <- fluidPage(

    # Application title
    titlePanel("Diamonds viewer"),

    # Sidebar with a slider input for number of bins 
    sidebarLayout(
        sidebarPanel(
               # This is a range slider (i.e. there's a max and min). It is set that way by "value" (the starting value), which is a 2-element vector
            sliderInput("caratrange",
                    "Range of carats",
                    min = min.carat,
                    max = max.carat,
                    value = c(min.carat, max.carat)),
        
        # Select x and y variables
             selectInput(inputId = "xvar",
                    label = "X axis",
                    choices = axis_vars,
                    selected = "x"),
        
            selectInput(inputId = "yvar",
                    label = "Y axis",
                    choices = axis_vars,
                    selected = "y"),
        
             selectInput(inputId = "color",
                    label = "Color", 
                    choices = factor.columns,
                    selected = "carat"),
        
            actionButton("go", 
                     "Go!",
                     icon = icon("thumbs-up")) 
    ),
    
    # Show a plot of diamonds data frame.
    mainPanel(
        plotOutput("diamonds_plot")
        )
    )
)

# Define server logic required to draw a histogram
server <- function(input, output) {

    filt_dia <- reactive({
        diamonds %>%
            filter(carat >= min(input$caratrange)) %>%
            filter(carat <= max(input$caratrange))
    })
    
    p_diamonds <- eventReactive(input$go, {
        ggplot(filt_dia(), aes_string(x = input$xvar, y = input$yvar, colour = input$color)) + 
            geom_point()
    })
    
    output$diagnostic <- renderText(
        input$caratrange
    )
    
    output$diamonds_plot <- renderPlot(
        p_diamonds()
    )
    
}

    
# This is a test of pulling a request for the homework8 -HS 2
    

# Run the application 
shinyApp(ui = ui, server = server)
